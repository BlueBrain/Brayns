/* Copyright (c) 2018, EPFL/Blue Brain Project
 * All rights reserved. Do not distribute without permission.
 * Responsible Author: Jonas Karlsson <jonas.karlsson@epfl.ch>
 *
 * This file is part of Brayns <https://github.com/BlueBrain/Brayns>
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License version 3.0 as published
 * by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#pragma once

#include "ospray/SDK/math/vec.ih"

// These are functions needed to handle > 2GB buffers in ispc.

#define __define_safe_index(T)                                              \
    inline const uniform T* uniform safe_index(const T* uniform const base, \
                                               const uniform uint64 index)  \
    {                                                                       \
        const uniform uint64 tSize = sizeof(uniform T);                     \
        const uniform uint64 offsetBytes = tSize * index;                   \
        return (const T* uniform const)((uint64)base + offsetBytes);        \
    }                                                                       \
                                                                            \
    inline const uniform T* varying safe_index(const T* varying const base, \
                                               const varying uint64 index)  \
    {                                                                       \
        const uniform uint64 tSize = sizeof(uniform T);                     \
        const varying uint64 offsetBytes = tSize * index;                   \
        return (const T* varying const)((uint64)base + offsetBytes);        \
    }

__define_safe_index(uint64);
__define_safe_index(int64);
__define_safe_index(uint32);
__define_safe_index(int32);
