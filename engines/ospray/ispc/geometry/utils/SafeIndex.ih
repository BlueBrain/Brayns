/* Copyright (c) 2018, EPFL/Blue Brain Project
 * All rights reserved. Do not distribute without permission.
 * Responsible Author: Jonas Karlsson <jonas.karlsson@epfl.ch>
 *
 * This file is part of Brayns <https://github.com/BlueBrain/Brayns>
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License version 3.0 as published
 * by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#pragma once

#include "ospray/SDK/math/vec.ih"

// These are functions needed to handle > 2GB buffers in ispc.

#define INT_MAX 2147483647

#define __define_safe_index_internal(T, UNIFORM_VARYING, CONST)               \
    inline CONST uniform T* UNIFORM_VARYING safe_index(                       \
        const uniform bool useSafeIndex, CONST T* UNIFORM_VARYING const base, \
        const UNIFORM_VARYING uint64 index)                                   \
    {                                                                         \
        if (useSafeIndex)                                                     \
        {                                                                     \
            const uniform uint64 tSize = sizeof(uniform T);                   \
            const UNIFORM_VARYING uint64 offsetBytes = tSize * index;         \
            return (CONST T * UNIFORM_VARYING const)((uint64)base +           \
                                                     offsetBytes);            \
        }                                                                     \
        else                                                                  \
        {                                                                     \
            return base + index;                                              \
        }                                                                     \
    }

#define __define_needs_safe_index(T)                                         \
    inline uniform bool needs_safe_index(const T* uniform ptr,               \
                                         const uniform uint64 numGeometries) \
    {                                                                        \
        return (sizeof(uniform T) * numGeometries) >= INT_MAX;               \
    }

#define __define_safe_index(T)                       \
    __define_safe_index_internal(T, uniform, const); \
    __define_safe_index_internal(T, uniform, );      \
    __define_safe_index_internal(T, varying, const); \
    __define_safe_index_internal(T, varying, );      \
    __define_needs_safe_index(T);
