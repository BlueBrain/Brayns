/* Copyright (c) 2019, EPFL/Blue Brain Project
 * All rights reserved. Do not distribute without permission.
 * Responsible Author: Sebastien Speierer <sebastien.speierer@epfl.ch>
 *
 * This file is part of Brayns <https://github.com/BlueBrain/Brayns>
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License version 3.0 as published
 * by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

// ospray
#include "ospray/SDK/common/Ray.ih"
#include "ospray/SDK/geometry/Geometry.ih"
#include "ospray/SDK/math/box.ih"
#include "ospray/SDK/math/vec.ih"

#include "utils/SafeIncrement.ih"

/////////////////////////////////////////////////////////////////////////////

#define SDF_EPSILON 0.0001

//////////////////////////////////////////////////////////////////////

struct SDFParams
{
    vec3f eye;
    uniform float segmentCountMultiplier;
};

DEFINE_SAFE_INCREMENT(SDFParams);

/////////////////////////////////////////////////////////////////////////////

// uniform void pointer
typedef const uniform uint64* uniform uDataPtr_t;
// uniform void pointer
typedef const varying uint64* uniform vDataPtr_t;
// function pointer type for SDF
typedef float (*distanceFunction_t)(const vec3f& /*p*/, uDataPtr_t /*geo*/,
                                    uDataPtr_t /*prim*/,
                                    const SDFParams& /*params*/);
// function pointer type for SDF aabb compute
typedef uniform box3fa (*bboxFunction_t)(uDataPtr_t /*geo*/, uDataPtr_t /*prim*/);

/////////////////////////////////////////////////////////////////////////////

inline vec3f computeNormal(const vec3f& pos,
                           const uniform distanceFunction_t sdfDistance,
                           const float e, uDataPtr_t geo, uDataPtr_t prim,
                           const SDFParams& params)
{
    // tetrahedron technique (4 evaluations)
    const uniform vec3f k0 = make_vec3f(1, -1, -1), k1 = make_vec3f(-1, -1, 1),
                        k2 = make_vec3f(-1, 1, -1), k3 = make_vec3f(1, 1, 1);

    return normalize(k0 * sdfDistance(pos + e * k0, geo, prim, params) +
                     k1 * sdfDistance(pos + e * k1, geo, prim, params) +
                     k2 * sdfDistance(pos + e * k2, geo, prim, params) +
                     k3 * sdfDistance(pos + e * k3, geo, prim, params));
}

/////////////////////////////////////////////////////////////////////////////

#define MAX_MARCH_ITERATION 32

inline float raymarching(const Ray& ray,
                         const uniform distanceFunction_t sdfDistance,
                         const uniform bboxFunction_t sdfBounds, uDataPtr_t geo,
                         uDataPtr_t prim, const SDFParams& params)
{
    const uniform box3fa bbox = sdfBounds(geo, prim);

    float t0, t1;
    intersectBox(ray, bbox, t0, t1);

    // skip this primitive if bbox isn't intersected
    if (t0 > t1)
        return -1.f;

    // TODO compute pixel radius
    const uniform float pixel_radius = SDF_EPSILON;

    float omega = 1.2f;
    float t = t0;
    float candidate_error = inf;
    float candidate_t = t0;
    float prev_radius = 0.f;
    float step_length = 0.f;
    uniform int step_count = 0;
    const uniform bool force_hit = true;

    // check if we start inside or outside of the shape
    float sdf_sign = (sdfDistance(ray.org, geo, prim, params) < 0 ? -1 : 1);

    for (int i = 0; i < MAX_MARCH_ITERATION; i++)
    {
        vec3f p = ray.org + ray.dir * t;

        float signed_radius = sdf_sign * sdfDistance(p, geo, prim, params);

        float radius = abs(signed_radius);

        bool sor_fail = (omega > 1.f && (radius + prev_radius) < step_length);

        if (sor_fail)
        {
            step_length -= omega * step_length;
            omega = 1.f;
        }
        else
        {
            step_length = signed_radius * omega;
        }

        prev_radius = radius;

        float error = radius / t;

        if (!sor_fail && error < candidate_error)
        {
            candidate_t = t;
            candidate_error = error;
        }

        if (!sor_fail && (error < pixel_radius || t > t1))
            break;

        t += step_length;

        step_count++;
    }

    if (t > t1 || (candidate_error > pixel_radius && !force_hit))
        return -1.f;

    return candidate_t;
}
