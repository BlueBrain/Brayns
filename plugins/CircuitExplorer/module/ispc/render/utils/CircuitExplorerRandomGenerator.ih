/* Copyright (c) 2015-2018, EPFL/Blue Brain Project
 * All rights reserved. Do not distribute without permission.
 * Responsible Author: Cyrille Favreau <cyrille.favreau@epfl.ch>
 *
 * <https://github.com/favreau/Brayns-UC-CircuitExplorer>
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License version 3.0 as published
 * by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#pragma once

#include <ospray/SDK/math/random.ih>
#include <ospray/SDK/math/vec.ih>

float getRandomValue(const bool useHardware, const varying ScreenSample& sample,
                     const int randomNumber);

/**
    Returns a random direction based on location in the frame buffer, the normal
   to the surface and rotation parameters for the precomputed hard-coded random
   distribution.
    @param useHardware Use hardware acceleration if set to true
    @param frameBufferWidth Width of the frame buffer
    @param sample Frame buffer sample being rendered
    @param normal Normal vector to the surface
    @param randomNumber A random number that introduces noise in the
   distribution
    @return A random direction based on specified parameters
*/
vec3f getRandomVector(const bool useHardware,
                      const unsigned int frameBufferWidth,
                      const varying ScreenSample& sample, const vec3f& normal,
                      const int randomNumber);

/**
    Returns tangent vectors for a given normal.
    @param useHardware Use hardware acceleration if set to true
    @param normal Given normal vector
    @param tangent The tangent vector is typically regarded as one vector that
   exists within the surface's plane (for a flat surface) or which lies tangent
   to a reference point on a curved surface
    @param biTangent The BiTangent vector which is effectively the "other"
   tangent vector for the surface, which is orthogonal to both the Normal vector
   and the chosen tangent vector
*/
void getTangentVectors(const vec3f& normal, vec3f& tangent, vec3f& biTangent);

/**
    @brief Returns a random direction according to specified parameters
*/
vec3f getRandomDir(const bool useHardware, varying RandomTEA* uniform rng,
                   const vec3f& biNorm0, const vec3f& biNorm1,
                   const vec3f& gNormal, const float rot_x, const float rot_y,
                   const uniform float epsilon);

/**
    @return A random vector within a specified cone
 */
vec3f getConeSample(const bool useHardware, const vec3f& direction,
                    varying RandomTEA* uniform rng, const float extent);

/**
    @return A random generator according to the location in the frame buffer
*/
varying RandomTEA* uniform createRandomNumberGenerator(
    const uniform Renderer* uniform self, const varying ScreenSample& sample);

/**
    @return An orthogonal vector (and combining coconuts)
    http://lolengine.net/blog/2013/09/21/picking-orthogonal-vector-combing-coconuts
*/
vec3f ortho(const vec3f& v);

inline float mix(const float x, const float y, const float a);

inline float hash(float n);

inline vec3f mod(const vec3f& v, const int m);

// hash based 3d value noise
float noise(const vec3f& x);

float cells(const vec3f& p, float cellCount);

float worleyNoise(const vec3f& p, float cellCount);
