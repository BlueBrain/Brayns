/* Copyright (c) 2015-2018, EPFL/Blue Brain Project
 * All rights reserved. Do not distribute without permission.
 * Responsible Author: Cyrille Favreau <cyrille.favreau@epfl.ch>
 *
 * This file is part of Brayns <https://github.com/BlueBrain/Brayns>
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License version 3.0 as published
 * by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

// Brayns
#include <engines/ospray/ispc/render/utils/AbstractRenderer.ih>

#include "SimulationMaterial.ih"

#include <ospray/SDK/transferFunction/TransferFunction.ih>

struct SimulationRenderer
{
    AbstractRenderer super;

    // Transfer function attributes
    const uniform TransferFunction* uniform transferFunction;

    // Simulation data
    uniform float* uniform simulationData;
    uint64 simulationDataSize;
};

inline bool hasSimulationMapping(const DifferentialGeometry& dg)
{
    const SimulationMaterial* material = (const SimulationMaterial*)dg.material;
    return material && material->getSimulationOffset;
}


inline vec4f getSimulationColor(const uniform SimulationRenderer& renderer,
                                const DifferentialGeometry& dg)
{
    const uniform vec4f undefined = make_vec4f(1.f, 0.f, 0.f, 0.5f);

    if (!renderer.simulationData)
        return undefined;

    const SimulationMaterial* material = (const SimulationMaterial*)dg.material;
    assert(hasSimulationMapping(dg));

    const varying uint64 offset =
        material->getSimulationOffset(dg.geometry, dg.primID);
    if (offset < renderer.simulationDataSize)
    {
        const varying float value = renderer.simulationData[offset];
        const uniform TransferFunction* uniform tf = renderer.transferFunction;
        return make_vec4f(tf->getColorForValue(tf, value),
                          tf->getOpacityForValue(tf, value));
    }
    return undefined;
}
