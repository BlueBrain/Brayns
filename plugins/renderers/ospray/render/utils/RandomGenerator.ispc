/* Copyright (c) 2015-2016, EPFL/Blue Brain Project
 * All rights reserved. Do not distribute without permission.
 * Responsible Author: Cyrille Favreau <cyrille.favreau@epfl.ch>
 *
 * This file is part of Brayns <https://github.com/BlueBrain/Brayns>
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License version 3.0 as published
 * by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <ospray/render/util.ih>
#include <ospray/render/Renderer.ih>

#include "RandomGenerator.ih"

/**
Random values were generated using the following python code:
    import random
    RANDOM_SET_SIZE = 32
    s = '{ '
    for j in range(0,RANDOM_SET_SIZE):
        if j != 0:
            s = s + ', '
        s = s + '{ '
        for i in range(0,RANDOM_SET_SIZE):
            if i != 0:
                s = s + ', '
            s = s + str(random.randint(0,10000) / 10000.0)
        s = s + ' }'
    s = s + ' }'
    print(s)
*/

#define RANDOM_SET_SIZE 32

uniform float randomDistribution[RANDOM_SET_SIZE][RANDOM_SET_SIZE] =
{
    {
        0.8331, 0.1492, 0.5013, 0.0709, 0.2545, 0.0668, 0.6379, 0.5358, 0.7913,
        0.003, 0.0711, 0.9793, 0.4557, 0.5097, 0.0722, 0.9251, 0.3607, 0.4455,
        0.3294, 0.4008, 0.618, 0.1958, 0.86, 0.296, 0.2794, 0.3252, 0.1557,
        0.3341, 0.5592, 0.2362, 0.6588, 0.3995
    },
    {
        0.7002, 0.8068, 0.5472, 0.5299, 0.337, 0.0206, 0.4052, 0.2337, 0.3351,
        0.3899, 0.3838, 0.1524, 0.7109, 0.5041, 0.3477, 0.975, 0.9783, 0.6342,
        0.0199, 0.4588, 0.648, 0.2287, 0.8717, 0.5422, 0.1583, 0.6459, 0.3803,
        0.3434, 0.7681, 0.3877, 0.611, 0.3462
    },
    {
        0.8798, 0.8556, 0.1517, 0.2746, 0.0969, 0.7807, 0.8912, 0.1916, 0.1479,
        0.3285, 0.8111, 0.2435, 0.925, 0.5887, 0.4442, 0.1931, 0.0101, 0.3075,
        0.8756, 0.3791, 0.8624, 0.9409, 0.0548, 0.3842, 0.5395, 0.252, 0.3455,
        0.5018, 0.9017, 0.0502, 0.636, 0.6271
    },
    {
        0.0372, 0.8811, 0.4598, 0.4265, 0.8424, 0.6277, 0.4516, 0.5479, 0.4091,
        0.8085, 0.3469, 0.1748, 0.8219, 0.7876, 0.1539, 0.4359, 0.6879, 0.9454,
        0.6888, 0.7115, 0.9401, 0.3816, 0.6566, 0.918, 0.9086, 0.0247, 0.5576,
        0.378, 0.5548, 0.6152, 0.3082, 0.0046
    },
    {
        0.0606, 0.8466, 0.8287, 0.9752, 0.9272, 0.6516, 0.6044, 0.8133, 0.3691,
        0.4695, 0.9277, 0.0045, 0.1732, 0.311, 0.3112, 0.137, 0.6772, 0.0468,
        0.0549, 0.0813, 0.391, 0.9412, 0.6396, 0.0879, 0.6627, 0.9941, 0.5484,
        0.6796, 0.1588, 0.6616, 0.4734, 0.4235
    },
    {
        0.8367, 0.4482, 0.802, 0.8316, 0.9231, 0.7716, 0.3895, 0.4056, 0.0593,
        0.0915, 0.8572, 0.6125, 0.3712, 0.8224, 0.4732, 0.2709, 0.2179, 0.6463,
        0.5556, 0.4563, 0.4528, 0.9078, 0.1258, 0.1227, 0.9096, 0.6988, 0.2043,
        0.9653, 0.1845, 0.2204, 0.6688, 0.3139
    },
    {
        0.7792, 0.5326, 0.0449, 0.9155, 0.6001, 0.5032, 0.2645, 0.186, 0.677,
        0.0711, 0.6681, 0.4619, 0.2602, 0.3426, 0.9313, 0.2266, 0.4036, 0.8261,
        0.8065, 0.4735, 0.2355, 0.0846, 0.0488, 0.007, 0.1701, 0.5631, 0.4822,
        0.5013, 0.4364, 0.03, 0.3803, 0.7442
    },
    {
        0.8546, 0.9973, 0.0015, 0.7195, 0.7487, 0.4137, 0.3552, 0.8018, 0.5897,
        0.0437, 0.4885, 0.0527, 0.1089, 0.3216, 0.5285, 0.3613, 0.2724, 0.8998,
        0.8835, 0.9558, 0.4795, 0.9523, 0.4004, 0.551, 0.5884, 0.2821, 0.2928,
        0.7176, 0.3188, 0.3532, 0.6005, 0.8908
    },
    {
        0.8774, 0.0743, 0.2688, 0.5272, 0.4416, 0.9782, 0.7596, 0.9144, 0.8193,
        0.2858, 0.3297, 0.6416, 0.2038, 0.7722, 0.8224, 0.9578, 0.7541, 0.8779,
        0.5613, 0.3276, 0.833, 0.4231, 0.6875, 0.4893, 0.7306, 0.821, 0.4735,
        0.0955, 0.8896, 0.3422, 0.124, 0.9397
    },
    {
        0.2486, 0.9958, 0.7441, 0.3389, 0.124, 0.2773, 0.8832, 0.9833, 0.5684,
        0.4374, 0.594, 0.3438, 0.2223, 0.5358, 0.2, 0.5501, 0.3353, 0.632,
        0.4342, 0.447, 0.7785, 0.4484, 0.7422, 0.6462, 0.0561, 0.0708, 0.177,
        0.2957, 0.0884, 0.2789, 0.6685, 0.3219
    },
    {
        0.3673, 0.8045, 0.2453, 0.318, 0.7137, 0.0253, 0.3142, 0.4777, 0.799,
        0.7, 0.1086, 0.6933, 0.8337, 0.4516, 0.4331, 0.0864, 0.5809, 0.3702,
        0.7678, 0.1915, 0.5186, 0.8214, 0.2651, 0.0785, 0.1284, 0.4575, 0.6873,
        0.3111, 0.7438, 0.5087, 0.7503, 0.3082
    },
    {
        0.6501, 0.8384, 0.3316, 0.1445, 0.0727, 0.0752, 0.9623, 0.7503, 0.3088,
        0.6327, 0.5487, 0.1809, 0.8733, 0.3077, 0.2443, 0.6862, 0.6368, 0.9426,
        0.8105, 0.3967, 0.8005, 0.9026, 0.3106, 0.9283, 0.0167, 0.0377, 0.781,
        0.2417, 0.3875, 0.2432, 0.258, 0.8564
    },
    {
        0.2548, 0.9303, 0.9507, 0.033, 0.9371, 0.982, 0.0775, 0.9049, 0.983,
        0.22, 0.5922, 0.6316, 0.6271, 0.1424, 0.6209, 0.5921, 0.8105, 0.1786,
        0.1208, 0.3233, 0.686, 0.3587, 0.8456, 0.0825, 0.6422, 0.5117,
        0.1631, 0.2466, 0.0518, 0.7046, 0.8316, 0.4284
    },
    {
        0.5398, 0.8017, 0.2887, 0.2873, 0.8045, 0.2112, 0.1016, 0.5156, 0.803,
        0.838, 0.9164, 0.7278, 0.4242, 0.1409, 0.7277, 0.8932, 0.5828, 0.8435,
        0.6562, 0.9421, 0.2354, 0.6136, 0.085, 0.2326, 0.8042, 0.7143, 0.4013,
        0.223, 0.208, 0.3509, 0.26, 0.7876
    },
    {
        0.7208, 0.5401, 0.8969, 0.5544, 0.8612, 0.1599, 0.5756, 0.0983, 0.8687,
        0.8619, 0.6997, 0.7555, 0.6902, 0.2027, 0.1064, 0.5322, 0.3991, 0.593,
        0.1404, 0.3591, 0.2349, 0.1123, 0.7568, 0.0231, 0.8914, 0.0426, 0.8869,
        0.269, 0.4433, 0.9015, 0.7191, 0.2793
    },
    {
        0.0704, 0.6825, 0.9269, 0.7538, 0.1696, 0.55, 0.4736, 0.2535, 0.1464,
        0.9273, 0.1886, 0.6011, 0.4749, 0.7225, 0.5111, 0.5697, 0.6803, 0.7433,
        0.7404, 0.5376, 0.9037, 0.4062, 0.9203, 0.9909, 0.7957, 0.1799, 0.2451,
        0.9742, 0.1985, 0.402, 0.769, 0.6328
    },
    {
        0.8401, 0.1788, 0.3172, 0.5771, 0.4014, 0.7552, 0.1641, 0.9683, 0.0067,
        0.6451, 0.871, 0.8788, 0.9125, 0.4976, 0.1259, 0.5187, 0.8932, 0.3852,
        0.7959, 0.0835, 0.2222, 0.6361, 0.892, 0.9283, 0.5098, 0.7495, 0.3016,
        0.2203, 0.6748, 0.0959, 0.4239, 0.057
    },
    {
        0.3467, 0.2001, 0.961, 0.1181, 0.1465, 0.9547, 0.8991, 0.4088, 0.4609,
        0.3972, 0.9105, 0.4069, 0.05, 0.9308, 0.204, 0.403, 0.9725, 0.1541,
        0.8334, 0.6877, 0.8363, 0.5232, 0.5962, 0.4472, 0.8765, 0.3481, 0.3726,
        0.1965, 0.3767, 0.8301, 0.2363, 0.4237
    },
    {
        0.2602, 0.5523, 0.9682, 0.957, 0.9926, 0.847, 0.6024, 0.7844, 0.3184,
        0.4005, 0.9966, 0.3391, 0.8144, 0.152, 0.6825, 0.3149, 0.1045, 0.2345,
        0.0911, 0.9499, 0.7126, 0.2554, 0.9552, 0.402, 0.3298, 0.1885, 0.7569,
        0.4046, 0.6757, 0.6002, 0.6407, 0.7785
    },
    {
        0.9958, 0.9866, 0.3001, 0.693, 0.5947, 0.0329, 0.3478, 0.3307, 0.9614,
        0.3602, 0.4085, 0.6429, 0.7192, 0.8989, 0.8312, 0.215, 0.2401, 0.6811,
        0.1996, 0.6315, 0.7042, 0.0031, 0.8399, 0.3899, 0.0412, 0.5453, 0.8391,
        0.7295, 0.8733, 0.4996, 0.0089, 0.4529
    },
    {
        0.5957, 0.5936, 0.6191, 0.822, 0.8382, 0.4967, 0.2387, 0.4081, 0.1647,
        0.282, 0.4233, 0.9793, 0.3865, 0.8265, 0.9795, 0.8513, 0.2063, 0.23,
        0.2696, 0.1212, 0.8313, 0.6053, 0.9525, 0.5785, 0.0557, 0.4573, 0.381,
        0.9066, 0.4884, 0.1443, 0.4624, 0.9164
    },
    {
        0.2818, 0.8703, 0.1477, 0.686, 0.0841, 0.8561, 0.0281, 0.1749, 0.8941,
        0.7155, 0.4028, 0.7034, 0.8186, 0.4116, 0.5637, 0.0263, 0.182, 0.7425,
        0.3205, 0.2274, 0.5975, 0.6214, 0.1891, 0.1482, 0.411, 0.3158, 0.2078,
        0.972, 0.7375, 0.9808, 0.0144, 0.0266
    },
    {
        0.9214, 0.4293, 0.5018, 0.274, 0.7737, 0.6071, 0.5457, 0.7291, 0.9468,
        0.5635, 0.872, 0.7105, 0.6257, 0.8698, 0.4122, 0.5723, 0.7946, 0.0029,
        0.5109, 0.5917, 0.5061, 0.9212, 0.2498, 0.0099, 0.4657, 0.4804, 0.0895,
        0.0436, 0.6064, 0.4249, 0.4252, 0.4765
    },
    {
        0.9368, 0.9175, 0.9802, 0.3154, 0.7732, 0.1048, 0.74, 0.9008, 0.4888,
        0.0607, 0.1964, 0.9699, 0.6989, 0.4983, 0.4092, 0.761, 0.5154, 0.0638,
        0.9458, 0.7325, 0.5007, 0.3273, 0.2135, 0.3731, 0.0605, 0.4724, 0.9256,
        0.4497, 0.3131, 0.1834, 0.2653, 0.36
    },
    {
        0.5402, 0.3964, 0.6886, 0.4847, 0.2661, 0.0086, 0.1334, 0.3721, 0.2747,
        0.4654, 0.9921, 0.5823, 0.7203, 0.1938, 0.1766, 0.3742, 0.0205, 0.7346,
        0.3868, 0.8759, 0.0943, 0.277, 0.186, 0.0085, 0.4295, 0.2497, 0.2277,
        0.5764, 0.2246, 0.7067, 0.366, 0.9226
    },
    {
        0.1686, 0.0368, 0.7404, 0.445, 0.75, 0.793, 0.2961, 0.5333, 0.1537,
        0.3305, 0.055, 0.828, 0.5234, 0.7351, 0.159, 0.5229, 0.4096, 0.4897,
        0.2923, 0.6552, 0.3788, 0.5677, 0.3503, 0.3618, 0.1243, 0.7739,
        0.3683, 0.5826, 0.1955, 0.8383, 0.5274, 0.0896
    },
    {
        0.4627, 0.2411, 0.7538, 0.0064, 0.1618, 0.6485, 0.6, 0.5339, 0.6779,
        0.3293, 0.0413, 0.9178, 0.1465, 0.5538, 0.7231, 0.2125, 0.6368, 0.6668,
        0.2204, 0.3304, 0.6671, 0.0328, 0.0865, 0.023, 0.7217, 0.5328, 0.381,
        0.3868, 0.7146, 0.362, 0.5706, 0.7509
    },
    {
        0.8638, 0.4667, 0.759, 0.7317, 0.8529, 0.0435, 0.5962, 0.4442, 0.859,
        0.4989, 0.6632, 0.426, 0.2612, 0.2138, 0.2764, 0.9406, 0.4323, 0.866,
        0.7974, 0.5269, 0.8135, 0.9365, 0.5207, 0.8278, 0.1137, 0.0102, 0.5507,
        0.7231, 0.5669, 0.1058, 0.8649, 0.1031
    },
    {
        0.3926, 0.1584, 0.0379, 0.64, 0.0984, 0.7604, 0.5735, 0.9992, 0.3678,
        0.5361, 0.9624, 0.1498, 0.0517, 0.2175, 0.6646, 0.5262, 0.6133, 0.075,
        0.3862, 0.6621, 0.0045, 0.0903, 0.3206, 0.1388, 0.459, 0.0588, 0.7126,
        0.1758, 0.4708, 0.6816, 0.6624, 0.8624
    },
    {
        0.3209, 0.6171, 0.4358, 0.9034, 0.3064, 0.0462, 0.4107, 0.6371, 0.4023,
        0.9894, 0.4231, 0.0537, 0.5731, 0.3949, 0.1349, 0.2076, 0.9205, 0.9809,
        0.8332, 0.9966, 0.3095, 0.2303, 0.7832, 0.6602, 0.991, 0.6271, 0.5029,
        0.449, 0.4766, 0.5949, 0.0745, 0.8509
    },
    {
        0.7385, 0.3525, 0.6371, 0.1563, 0.2007, 0.1026, 0.0071, 0.6714, 0.4956,
        0.1551, 0.5577, 0.464, 0.1258, 0.4592, 0.8222, 0.9414, 0.7373, 0.4002,
        0.9559, 0.9491, 0.4598, 0.1849, 0.236, 0.314, 0.5081, 0.0422, 0.0885,
        0.3301, 0.1722, 0.9087, 0.336, 0.0219
    },
    {
        0.2266, 0.8913, 0.0974, 0.9041, 0.1107, 0.9528, 0.4548, 0.6054, 0.8506,
        0.6053, 0.5773, 0.0249, 0.1492, 0.1965, 0.5345, 0.4366, 0.3874, 0.9492,
        0.1027, 0.4233, 0.9485, 0.7478, 0.5725, 0.1599, 0.9603, 0.7103, 0.4575,
        0.4077, 0.2592, 0.5755, 0.2364, 0.9029
    }
};

inline float rotate( float x, const float dx )
{
    x += dx;
    if( x >= 1.f ) x -= 1.f;
    return x;
}

inline vec3f getRandomVector(
    varying ScreenSample& sample,
    const varying vec3f& normal,
    const varying int randomNumber )
{
    vec3f tangent,biTangent;
    getTangentVectors( normal, tangent, biTangent );
    const varying int accumID = sample.sampleID.z;
    const varying float rot_x = 1.f - precomputedHalton3( accumID );
    const varying float rot_y = 1.f - precomputedHalton5( accumID );

    const varying int x = (randomNumber + sample.sampleID.x) % RANDOM_SET_SIZE;
    const varying int y = (randomNumber + sample.sampleID.y) % RANDOM_SET_SIZE;

    const varying float rx =
        rotate( randomDistribution[y][RANDOM_SET_SIZE-x], rot_x );
    const varying float ry =
        rotate( randomDistribution[RANDOM_SET_SIZE-x][y], rot_y );
    const varying float w = sqrt( 1.f - ry );
    const varying float cx = cos(( 2.f * M_PI ) * rx) * w;
    const varying float cy = sin(( 2.f * M_PI ) * rx) * w;
    const varying float cz = sqrt( ry );
    return cx * tangent + cy * biTangent + cz * normal;
}

void getTangentVectors(
    const varying vec3f& normal,
    varying vec3f& tangent,
    varying vec3f& biTangent )
{
    tangent = make_vec3f( 1.f, 0.f, 0.f );
    if( abs( dot( tangent, normal )) > 0.95f )
        tangent = make_vec3f( 0.f, 1.f, 0.f );
    biTangent = normalize( cross( tangent, normal ));
    tangent = normalize( cross( biTangent, normal ));
}
