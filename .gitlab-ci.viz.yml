stages:
  - test
  
include:
  - project: viz/ci/gitlabpipelines
    file: index.yml

default:
  tags: []
  
ubuntu-clangformat-check:
  stage: test
  variables:
    KUBERNETES_CPU_LIMIT: 4       
    KUBERNETES_CPU_REQUEST: 4                             
    KUBERNETES_MEMORY_LIMIT: 8Gi
    KUBERNETES_MEMORY_REQUEST: 8Gi
  image:
    name: ubuntu:20.04
    entrypoint: [""]
  script:
    - apt update && apt install -y git clang-format-12
    - CLANG_FORMAT_EXTENSIONS="\.[cmh]$|\.[chi]pp$|\.frag$|\.vert$|\.glsl$|\.ispc$|\.ih$"
    - if [ -f .clang-format ]; then
    - git pull origin master
    - if git diff --name-only --diff-filter=ACMR origin/master | grep -E "$CLANG_FORMAT_EXTENSIONS" | xargs -n1 clang-format-12 -style=file -fallback-style=none -output-replacements-xml | grep "<replacement " >/dev/null
    - then
    - echo "clang-format check failed - commit does not match coding style"
    - git diff --name-only --diff-filter=ACMR origin/master | grep -E "$CLANG_FORMAT_EXTENSIONS" | xargs -n1 clang-format-12 -i -style=file -fallback-style=none
    - git diff
    - exit 1
    - else
    - echo "clang-format check successful"
    - fi
    - fi


ubuntu-cpp-build:
  extends: .cmake-ubuntu
  stage: test
  variables:
    KUBERNETES_CPU_LIMIT: 4       
    KUBERNETES_CPU_REQUEST: 4                             
    KUBERNETES_MEMORY_LIMIT: 8Gi
    KUBERNETES_MEMORY_REQUEST: 8Gi
  before_script:
    # From the Dockerfile
    - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y $APT_BASE_PACKAGES $APT_PACKAGES
   
    - DIST_PATH=/app/dist
  
    # Install ISPC
    - ISPC_VERSION=1.10.0b
    - ISPC_DIR=ispc-v${ISPC_VERSION}-linux
    - ISPC_PATH=/app/ispc-v1.10.0-linux
    - export PATH=$PATH:${ISPC_PATH}
    
    - mkdir -p ${ISPC_PATH}
    - wget https://github.com/ispc/ispc/releases/download/v1.10.0/${ISPC_DIR}.tar.gz
    - tar zxvf ${ISPC_DIR}.tar.gz -C ${ISPC_PATH} --strip-components=1
    - rm -rf ${ISPC_PATH}/${ISPC_DIR}/examples


    # Install embree
    # https://github.com/embree/embree/releases
    - EMBREE_VERSION=3.5.2
    - EMBREE_FILE=embree-${EMBREE_VERSION}.x86_64.linux.tar.gz
    - mkdir -p ${DIST_PATH}
    - wget https://github.com/embree/embree/releases/download/v${EMBREE_VERSION}/${EMBREE_FILE}
    - tar zxvf ${EMBREE_FILE} -C ${DIST_PATH} --strip-components=1
    - rm -rf ${DIST_PATH}/bin ${DIST_PATH}/doc

    # Install OSPRay
    # https://github.com/ospray/ospray/releases
    - OSPRAY_TAG=v1.8.5
    - OSPRAY_SRC=/app/ospray

    - mkdir -p ${OSPRAY_SRC}
    - git clone https://github.com/ospray/ospray.git ${OSPRAY_SRC}
    - cd ${OSPRAY_SRC}
    - git checkout ${OSPRAY_TAG}
    - mkdir -p build && cd build
    - CMAKE_PREFIX_PATH=${DIST_PATH} cmake .. -GNinja -DOSPRAY_ENABLE_TUTORIALS=OFF -DOSPRAY_ENABLE_APPS=OFF -DCMAKE_INSTALL_PREFIX=${DIST_PATH}
    - ninja -j4 install
    
    - BOOST_SRC=/app/boost
    - mkdir ${BOOST_SRC}
    - cd ${BOOST_SRC}
    - wget https://boostorg.jfrog.io/artifactory/main/release/1.70.0/source/boost_1_70_0.tar.gz
    - tar -xzf boost_1_70_0.tar.gz
    - cd ./boost_1_70_0
    - ./bootstrap.sh
    - ./b2 install -j 4
    
    - cd $CI_PROJECT_DIR

  variables:
    APT_PACKAGES: git libassimp-dev libhdf5-serial-dev libtbb-dev pkg-config wget ca-certificates libssl-dev libwebsockets-dev
    CMAKE_ARGS: -DCMAKE_PREFIX_PATH=$DIST_PATH -DBRAYNS_CIRCUITEXPLORER_ENABLED=ON -DBRAYNS_CIRCUITINFO_ENABLED=ON -DBRAYNS_DTI_ENABLED=ON -DBRAYNS_VIEWER_ENABLED=ON -DBRAYNS_BENCHMARK_ENABLED=ON


docker-build:
  extends: .build-image-using-kaniko
  stage: test
  
  rules:
  #  - if: $CI_MERGE_REQUEST_IID
    # run on default branch in order to upload coverage report
    - if: $CI_COMMIT_BRANCH == "BRAYNS_306_Migrate_CI_to_Gitlab"
