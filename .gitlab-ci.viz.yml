stages:
  - test
  - publish

include:
  - project: viz/ci/gitlabpipelines
    file: index.yml

ubuntu-clangformat-check:
  stage: test
  image:
    name: ubuntu:20.04
    entrypoint: [""]
  script:
    - apt update && apt install -y git clang-format-12
    - CLANG_FORMAT_EXTENSIONS="\.[cmh]$|\.[chi]pp$|\.frag$|\.vert$|\.glsl$|\.ispc$|\.ih$"
    - if [ -f .clang-format ]; then
    - git pull origin develop
    - if git diff --name-only --diff-filter=ACMR origin/develop | grep -E "$CLANG_FORMAT_EXTENSIONS" | xargs -n1 clang-format-12 -style=file -fallback-style=none -output-replacements-xml | grep "<replacement " >/dev/null ; then
    - echo "clang-format check failed - commit does not match coding style"
    - git diff --name-only --diff-filter=ACMR origin/develop | grep -E "$CLANG_FORMAT_EXTENSIONS" >> wrong_format_files.txt
    - cat wrong_format_files.txt | xargs -n1 clang-format-12 -i -style=file -fallback-style=none
    - git diff
    - exit 1
    - else
    - echo "clang-format check successful"
    - fi
    - fi
  rules:
    - if: $GITHUB_PULL_REQUEST_ID

ubuntu-cpp-build:
  extends: .cmake-ubuntu
  stage: test
  variables:
    APT_PACKAGES: git libhdf5-serial-dev libtbb-dev pkg-config wget ca-certificates libssl-dev libwebsockets-dev libboost-all-dev
    CMAKE_ARGS: -DCMAKE_PREFIX_PATH=/app/dist -DISPC_EXECUTABLE=/app/ispc-v1.10.0-linux/bin/ispc -DBRAYNS_CIRCUITEXPLORER_ENABLED=ON -DBRAYNS_CIRCUITINFO_ENABLED=ON -DBRAYNS_DTI_ENABLED=ON
    KUBERNETES_CPU_LIMIT: 4
    KUBERNETES_CPU_REQUEST: 4
    KUBERNETES_MEMORY_LIMIT: 8Gi
    KUBERNETES_MEMORY_REQUEST: 8Gi
    NUM_COMPILE_JOBS: 4
    DIST_PATH: /app/dist
  before_script:
    - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y $APT_BASE_PACKAGES $APT_PACKAGES

    # Install ISPC
    - ISPC_VERSION=1.10.0b
    - ISPC_DIR=ispc-v${ISPC_VERSION}-linux
    - ISPC_PATH=/app/ispc-v1.10.0-linux
    - export PATH=$PATH:${ISPC_PATH}

    - mkdir -p ${ISPC_PATH}
    - wget https://github.com/ispc/ispc/releases/download/v1.10.0/${ISPC_DIR}.tar.gz
    - tar zxvf ${ISPC_DIR}.tar.gz -C ${ISPC_PATH} --strip-components=1
    - rm -rf ${ISPC_PATH}/${ISPC_DIR}/examples

    # Install embree
    # https://github.com/embree/embree/releases
    - EMBREE_VERSION=3.5.2
    - EMBREE_FILE=embree-${EMBREE_VERSION}.x86_64.linux.tar.gz
    - mkdir -p ${DIST_PATH}
    - wget https://github.com/embree/embree/releases/download/v${EMBREE_VERSION}/${EMBREE_FILE}
    - tar zxvf ${EMBREE_FILE} -C ${DIST_PATH} --strip-components=1
    - rm -rf ${DIST_PATH}/bin ${DIST_PATH}/doc

    # Install OSPRay
    # https://github.com/ospray/ospray/releases
    - OSPRAY_TAG=v1.8.5
    - OSPRAY_SRC=/app/ospray

    - mkdir -p ${OSPRAY_SRC}
    - git clone https://github.com/ospray/ospray.git ${OSPRAY_SRC}
    - cd ${OSPRAY_SRC}
    - git checkout ${OSPRAY_TAG}
    - mkdir -p build && cd build
    - CMAKE_PREFIX_PATH=${DIST_PATH} cmake .. -GNinja -DOSPRAY_ENABLE_TUTORIALS=OFF -DOSPRAY_ENABLE_APPS=OFF -DCMAKE_INSTALL_PREFIX=${DIST_PATH}
    - ninja -j$NUM_COMPILE_JOBS install
    - cd $CI_PROJECT_DIR
  rules:
    - if: $GITHUB_PULL_REQUEST_ID

docker-build:
  variables:
    KUBERNETES_CPU_LIMIT: 4
    KUBERNETES_CPU_REQUEST: 4
    KUBERNETES_MEMORY_LIMIT: 8Gi
    KUBERNETES_MEMORY_REQUEST: 8Gi
  extends: .build-image-using-kaniko
  before_script:
    # We need to overwrite CI_REGISTRY variable so it does not point to CI/CD variable:
    # "https://index.docker.io/v1/". Otherwise we run into 401 Unauthorized as
    # CI_REGISTRY_PASSWORD is a protected variable i.e. not available for regular CI jobs.
    # And as per https://gitlab.com/gitlab-org/gitlab-runner/-/issues/3555:
    # we cannot overwrite predefined CI/CD variables in "variables" section, hence the hack
    - export CI_REGISTRY=""
  rules:
    - if: $GITHUB_PULL_REQUEST_ID

docker-publish-to-dockerhub:
  variables:
    KUBERNETES_CPU_LIMIT: 4
    KUBERNETES_CPU_REQUEST: 4
    KUBERNETES_MEMORY_LIMIT: 8Gi
    KUBERNETES_MEMORY_REQUEST: 8Gi
    CI_REGISTRY_IMAGE: bluebrain/brayns
  extends: .publish-image-using-kaniko
